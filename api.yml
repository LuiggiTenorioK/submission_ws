openapi: '3.0.2'
info:
  title: Submission server API
  version: '1.0'
# Allowed servers
servers:
  - url: https://scheduler.biocomputingup.it/api/v1
# Re-usable components
components:
  # Define component schemes
  schemas:
    # User object
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique ID of the user
        email:
          type: string
          description: Email address of the user
    # Script object
    Script:
      type: object
      properties:
        name:
          type: string
          description: Unique name of the script to submit
        params:
          type: object
          additionalProperties: true
          description: Dictionary mapping parameter names to values
    # Task object
    Task:
      type: object
      # Define required properties
      required: [ 'status', 'queue' ]
      # Define property schema
      properties:
        uuid:
          type: string
          description: Unique ID of the current task
        status:
          type: string
          description: Current status of the task
        queue:
          type: string
          description: Unique ID of the queue
        user:
          $ref: '#/components/schemas/User'
        script:
          $ref: '#/components/schemas/Script'
  # Define security schemes (only access token)
  securitySchemes:
    # Access token
    baererAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
# Global security settings 
security:
  # Define scopes
  - baererAuth: [ ]
# Implemented paths
paths:
  # Check script parameters
  /script/{name}:
    get:
      description: Return parameters, type and validation for given script
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Unique name of the script
      responses:
        '200':
          description: (Ok) given script exists, parameters are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
        '404':
          description: (Not found) given script does not exist
  /script/:
    get:
      description: Return parameters, type and validation for given script
      responses:
        '200':
          description: (Ok) given script exists, parameters are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Script'
        '404':
          description: (Not found) given script does not exist
  # Operations on tasks
  /task/:
    # Submit a task
    post:
      description: Submit a new task
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: (Created) given task has been submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: (Bad request) given parameters do not satisfy any task specification
        '500':
          description: (Internal server error) given task could not start
        '403':
          description: (Forbidden) your request cannot be submitted
  # Other operations on tasks
  /task/{uuid}/:
    parameters:
      - in: path
        name: uuid
        schema:
          type: string
        required: true
        description: Unique ID of the task
    # Retrieve a task
    get:
      description: Retrieve status of the given task
      responses:
        '200':
          description: (Ok) task has been retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: (Not found) task does not exist
        '403':
          description: (Forbidden) your request cannot be fulfilled
    # Delete a task
    delete:
      description: Delete given task, if any
      responses:
        '204':
          description: (No content) task has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: (Not found) task does not exist
        '403':
          description: (Forbidden) your request cannot be fulfilled
        '500':
          description: (Internal server error) the task was not deleted for whatever reason
  /task/{uuid}/download/:
    parameters:
      - in: path
        name: uuid
        schema:
          type: string
        required: true
        description: Unique ID of the task
    # Retrieve a task
    get:
      description: Download current working dir as zip of the given task
      responses:
        '200':
          description: (Ok) task has been retrieved
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '404':
          description: (Not found) task does not exist
        '403':
          description: (Forbidden) your request cannot be fulfilled
  /task/{uuid}/files/:
    parameters:
      - in: path
        name: uuid
        schema:
          type: string
        required: true
        description: Unique ID of the task
    # Retrieve a task
    get:
      description: Get the content of the working directory as list of files
      responses:
        '200':
          description: (Ok)
        '404':
          description: (Not found) task does not exist
        '403':
          description: (Forbidden) your request cannot be fulfilled
  # Exchange external token for an internal one
  /token/{username}/:
    parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
        description: unique ID of the user trying to authenticate
    get:
      description: Exchanges external/OAuth2 access token with an internal one. It uses email for granting access to authenticated users. Therefore, requesting application is responsible for providing an access token with enough information (for now, email address is required).
      responses:
        '200':
          description: (Ok) you have been authenticated by external service
          content:
            text/plain:
              schema:
                type: string
                example: isthisanaccesstoken?
        '403':
          description: (Forbidden) your request has been refused by external authentication service
